local class = require("DotLua/OOP/Class")
local Logger = require("DotLua/Debug/Logger")
local EventHandler = require("DotLua/Event/EventHandler")
local ItemPool = require("DotLua/Pool/ItemPool")

----public----
--消息机制
-- 对于全局的消息可以使用Game.EventMgr访问到
local EventDispatcher =
    class(
    function(self)
        self.handlerPool = ItemPool(EventHandler)
        self.handlerDic = {}

        self.tempHandlers = {}
    end
)

----public----
-- 注册事件的侦听
-- @param eventID 消息ID号
-- @param receiver 消息接收者，可以为nil
-- @param func 消息处理函数，不可以为nil
-- @param isOnce 标识消息是否只处理一次，如果为true,触发一次后将会被删除
-- @param customData 消息可以携带自定义参数
function EventDispatcher:Register(eventID, receiver, func, customData)
    if not func then
        Logger.Error("Event", "LuaEventDispatcher::RegisterListener->func is empty")
        return
    end

    local handler = self.handlerPool:Get(eventID, receiver, func, customData)

    local handlers = self.handlerDic[eventID]
    if not handlers then
        handlers = {}
        self.events[eventID] = handlers
    end

    table.insert(handlers, handler)
end

----public----
-- 取消事件的侦听
-- @param eventID 消息ID号
-- @param receiver 消息接收者
-- @param func 消息处理函数
function EventDispatcher:Unregister(eventID, receiver, func)
    if not func or not eventID then
        Logger.Error("Event", "LuaEventDispatcher::UnregisterListener->func is empty")
        return
    end

    local handlers = self.handlerDic[eventID]
    if handlers then
        for i = #(handlers), 1, -1 do
            local handler = handlers[i]
            if handler:GetReceiver() == receiver and handler:GetFunc() == func then
                table.remove(handlers, i)
                self.handlerPool:Release(handler)
                break
            end
        end
    end
end

----public----
-- 取消对应消息ID的所有侦听
-- @param eventID 消息ID号
function EventDispatcher:UnregisterAll(eventID)
    local handlers = self.handlerDic[eventID]
    if handlers then
        for i = #(handlers), 1, -1 do
            local handler = handlers[i]

            table.remove(handlers, i)
            self.eventPool:Release(handler)
        end
    end
end

----public----
-- 触发事件
--@param eventID 消息ID号
--@param ... 接收到的参数
function EventDispatcher:Trigger(eventID, ...)
    local handlers = self.handlerDic[eventID]
    if handlers then
        table.copyto(handlers, self.tempHandlers)

        for _, handler in ipairs(self.tempHandlers) do
            if handler and handler:IsValid() then
                handler:Invoke(...)
            end
        end

        table.clear(self.tempHandlers)
    end
end

----public----
-- 取消所有的侦听
function EventDispatcher:Clear()
    self.handlerDic = {}
    self.handlerPool:Clear()
end

return EventDispatcher
